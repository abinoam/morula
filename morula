#!/usr/bin/env ruby

# encoding: utf-8

# ----------------------------------------------------------------
# Date: 23 Jan 2012 - version 0.1-beta
# Description: Script that saves tweets into an SQLite3 database
# Author: Panagiotis Atmatzidis - http://about.me/atmosx
# Github: https://github.com/atmosx/morula
# License: MIT
# ----------------------------------------------------------------

# required gems
require 'twitter'               
require 'sqlite3'
require 'benchmark'
require 'date'
require 'optparse'

$version = '0.1-beta'

class Morula
  attr_accessor :database
  def initialize(database)
    @database = database
  end                     
  
  def date_time(time)
        current = DateTime.parse(time.to_s)
        current.to_time
  end     

  # Doing a check before dumping everything to the database
  def update(username, tableid)
      location = Twitter.user(username.to_s).location
      db = SQLite3::Database.open(@database)
      count_tweets = 0
      saved_tweets = Array.new
      already_saved = 0
      retries = 0
      db.execute("SELECT content_id FROM #{tableid}").each {|x| saved_tweets << x.join}
      b = Benchmark.realtime do
      begin
        (1..10).each do |page|
            Twitter.user_timeline(username, :page => page, :count => 50).each do |tweet|
               if saved_tweets.include?(tweet.id.to_s)
                 already_saved += 1
               else
                 time = date_time(tweet.created_at).to_time.to_s
                 db.execute("INSERT INTO  #{tableid} (username, pdate, content, content_id, location) VALUES(?,?,?,?,?)", username, time, tweet.text, tweet.id, location)
                 printf('*')
                 count_tweets += 1
               end
            end
          end
      rescue 
          retries += 1 
          if retries > 3
             puts "\nThere was a connection problem. Please try later."
          else
             puts "\nFailed #{retries} time(s) to fetch data... Retrying...\n"
             retry
          end
        end
      end
      db.close
      if count_tweets > 0
        printf("\n%i tweets saved to database in %.2f seconds\n", count_tweets, b)
      elsif already_saved > 0
        puts "#{already_saved} tweets are already saved in your database"
      printf("Time elapsed during check out: %.2f seconds\n", b)
      end
  end
    
  def create_table(tableid)
    if File.exists?(@database)
      db = SQLite3::Database.new(@database)
      begin
         # |key|username|date|content|content_id|location
         db.execute %Q{ CREATE TABLE #{tableid} (id integer primary key, username varchar(10), pdate date, content varchar(14000), content_id integer(100), location varchar(100)) }
         puts "Table '#{tableid}' has been created on database: #{@database}"
      rescue                     
        puts "Table for user '#{tableid}' exists in database!"
      end                                    
      db.close      
    else      
      puts "The database does not exist!"                                                             
    end
  end
  
  def create_db
     if File.exists?(@database)
       puts "#{@database} already exists!"
     else
       db = SQLite3::Database.new(@database)
       db.close
     end
  end 
  
  def date_time(time)
        current = DateTime.parse(time.to_s)
        current.to_time
  end
  
  def file_size(file) # I need to add floating point till 2nd decimal here
    x = File.size(file).to_f
    kb = 1024
    mb = (1024 ** 2)
    gb = (1024 ** 3)
    tb = (1024 ** 4)
    if x < 1024
       return "#{x} Bytes"
    elsif x > 1024 && x < mb
       #return "#{x/kb} KB"
       sprintf("%0.2f KB", (x/kb))
    elsif x > mb && x < gb
       #return "#{x/mb} MB"
       sprintf("%0.2f MB", (x/mb))
    elsif x > gb
       return "#{x/gb} GB"
    end
  end

  def print_tstats
    # pretify this a bit
      db = SQLite3::Database.open(@database)
      tlist = db.execute("SELECT name FROM sqlite_master WHERE type='table' ORDER BY name;").flatten
      entries = 0
      puts "morula #{$version} (C) 2012"
      puts ""
      msg = "Details for #{@database}"
      puts msg
      puts "-" * msg.length
      tlist.each do |table|
          count = 0
          db.execute("select * from #{table}").each {|entry| count +=1}
          dlist = db.execute("select pdate from #{table} order by rowid desc limit 1;").flatten
          date = dlist.map{|table| %Q('#{table}')}.join() #turning the flatten array into string
          printf "Table: %-20s Entries: %-10s Last Update: %-20s\n", table, count, date
          entries += count
      end
      puts "-" * msg.length
      puts "The database has #{tlist.length} tables, #{file_size(@database)} size featuring #{entries} total entries."
      puts ""
  end

    # Statistics from db
  def drop_table(tableid)
      db = SQLite3::Database.open(@database)
      db.execute("DROP TABLE #{tableid};")
      db.close
  end
end

def dbase(x)
  if x == nil
    home = ENV['HOME']
    database = home + '/' + '.morula.db'
    return database
  else
    database = x
    return database
  end
end

options = {}                         

optparse = OptionParser.new do |opts|
  
  opts.banner = "morula #{$version} (C) 2012\n\nUsage: morula -t twitter -u dens [options: install, create, update, delete]\nExample: morula info"
  
  opts.on('-d FILE', '--database', 'Use specific database file, default is ~/.morula.db') do |x|
    options[:database] = x
  end
  
  opts.on('-t TABLEID', '--tableid', 'The user table id which will be used to store all his data in the database') do |x|
    options[:tableid] = x
  end               
  
  opts.on('-u USER', '--userid', 'Userid for the specific protocol [only twitter supported]') do |x|
    options[:userid] = x
  end
  
  opts.on('-s USER/TABLE', '--sameid', 'Use the same tableid and userid. Useful when we want to use aliases as tables in our database') do |x|
    options[:userid] = x
    options[:tableid] = x
  end
  
  opts.on('-h', '--help', 'Display help menu') do
    puts opts
    exit
  end
end

optparse.parse!      

puts "morula #{$version} (c) 2011\nType 'morula -h' for help" if ARGV[0] == nil

if ARGV[0] != nil
  if ARGV[0] == 'info'
    db = dbase(options[:database])
    morula = Morula.new(db)
    morula.print_tstats
  elsif options[:tableid] == nil
    puts "You must use a table id. See help."; exit
  else
    tid = options[:tableid].to_s
    uid = options[:userid].to_s
    case ARGV[0]
    when 'install'
      db = dbase(options[:database])
      puts "database file: #{db}"
      #puts "userid: #{uid}"
      #puts "tableid: #{tid}"
      morula = Morula.new(db)
      morula.create_db
    when 'create'
       db = dbase(options[:database])
       morula = Morula.new(db)
       morula.create_table(tid)
    when 'update'
      db = dbase(options[:database])
      morula = Morula.new(db)
      if options[:userid] == nil
        puts "You must choose a userid for the specific protocol. In case of twitter you specify the user id!"
      else
        usr = options[:userid].to_s
        morula.update(usr, tid)
      end
    when 'delete'
      db = dbase(options[:database])
      morula = Morula.new(db)
      morula.drop_table(tid)
      puts "Table #{tid} has been deleted"
    else
      puts "Unknown option(s). Type morula -h for help."
    end
  end
end
